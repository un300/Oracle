{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"02_[코드] 데이콘 기초 가이드라인 + Bidirectional LSTM","private_outputs":true,"provenance":[],"collapsed_sections":[],"mount_file_id":"1K8BTCACxcrhaAZua_Q1LTMbFVzMRP_4A","authorship_tag":"ABX9TyMIrXgcI9zCLltMwVb3IMAz"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"AwgmiMgd6zzh"},"source":["# 02_[코드] 데이콘 기초 가이드라인 + Bidirectional LSTM"]},{"cell_type":"code","metadata":{"id":"En9_VCiR62Br"},"source":["%reload_ext autoreload\n","%autoreload 2\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gm4bzKjQ7CZd"},"source":["import warnings \n","warnings.filterwarnings(action='ignore')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KBfLyZSK61_V"},"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import re\n","import os\n","\n","\n","from matplotlib import rcParams, pyplot as plt\n","from pathlib import Path\n","from sklearn.metrics import accuracy_score, log_loss\n","from sklearn.model_selection import StratifiedKFold\n","from tensorflow.keras import Sequential\n","from tensorflow.keras.layers import Dense, Embedding, LSTM, GlobalMaxPooling1D, Conv1D, Dropout, Bidirectional\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.utils import plot_model, to_categorical\n","from tensorflow.keras.optimizers import Adam\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qHR4GYDu619O"},"source":["gpus = tf.config.experimental.list_physical_devices('GPU')\n","if gpus:\n","    # Restrict TensorFlow to only use the first GPU\n","    try:\n","        tf.config.experimental.set_visible_devices(gpus[0], 'GPU')\n","        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n","        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPU\")\n","    except RuntimeError as e:\n","        # Visible devices must be set before GPUs have been initialized\n","        print(e)\n","else:\n","    print('No GPU detected')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2nythtl2615I"},"source":["rcParams['figure.figsize'] = (16, 8)\n","plt.style.use('fivethirtyeight')\n","pd.set_option('max_columns', 100)\n","pd.set_option(\"display.precision\", 4)\n","warnings.simplefilter('ignore')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NGLwXCsp617d"},"source":["# 데이터 불러오기\n","\n","raw_train = pd.read_csv('/content/drive/MyDrive/[데이콘] 소설 작가 분류 AI 경진대회/data/train.csv')\n","raw_test = pd.read_csv('/content/drive/MyDrive/[데이콘] 소설 작가 분류 AI 경진대회/data/test_x.csv')\n","sample_submission = pd.read_csv('/content/drive/MyDrive/[데이콘] 소설 작가 분류 AI 경진대회/data/sample_submission.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"45OVz7yk7_8a"},"source":["train = raw_train.copy()\n","test = raw_test.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q-OzzYpr6134"},"source":["def alpha_num(text):\n","    return re.sub(r'[^A-Za-z0-9 ]', '', text)\n","\n","\n","def remove_stopwords(text):\n","    final_text = []\n","    for i in text.split():\n","        if i.strip().lower() not in stopwords:\n","            final_text.append(i.strip())\n","    return \" \".join(final_text)\n","\n","\n","stopwords = [ \"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"as\", \n","             \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\", \"could\", \n","             \"did\", \"do\", \"does\", \"doing\", \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"has\", \n","             \"have\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hers\", \"herself\", \"him\", \"himself\", \n","             \"his\", \"how\", \"how's\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"it\", \"it's\", \"its\", \"itself\", \n","             \"let's\", \"me\", \"more\", \"most\", \"my\", \"myself\", \"nor\", \"of\", \"on\", \"once\", \"only\", \"or\", \"other\", \"ought\", \"our\", \"ours\", \n","             \"ourselves\", \"out\", \"over\", \"own\", \"same\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"so\", \"some\", \"such\", \"than\", \"that\", \n","             \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"these\", \"they\", \"they'd\", \"they'll\", \n","             \"they're\", \"they've\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"very\", \"was\", \"we\", \"we'd\", \"we'll\", \n","             \"we're\", \"we've\", \"were\", \"what\", \"what's\", \"when\", \"when's\", \"where\", \"where's\", \"which\", \"while\", \"who\", \"who's\", \"whom\", \n","             \"why\", \"why's\", \"with\", \"would\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\" ]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KqhEo_bp611F"},"source":["train['text'] = train['text'].str.lower().apply(alpha_num).apply(remove_stopwords)\n","test['text'] = test['text'].str.lower().apply(alpha_num).apply(remove_stopwords)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UN8Fh50O61zA"},"source":["X_train = train['text'].values\n","X_test = test['text'].values\n","y = train['author'].values\n","print(X_train.shape, X_test.shape, y.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4i5jeXC961v-"},"source":["vocab_size = 20000\n","embedding_dim = 64\n","max_length = 500\n","padding_type='post'\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QeOpaSz861sz"},"source":["tokenizer = Tokenizer(num_words = vocab_size)\n","tokenizer.fit_on_texts(X_train)\n","word_index = tokenizer.word_index"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"orzojvt98Nrj"},"source":["train_sequences = tokenizer.texts_to_sequences(X_train)\n","test_sequences = tokenizer.texts_to_sequences(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JzPL5Jze8NwZ"},"source":["trn = pad_sequences(train_sequences, padding=padding_type, maxlen=max_length)\n","tst = pad_sequences(test_sequences, padding=padding_type, maxlen=max_length)\n","print(trn.shape, tst.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DyMwGhX58amZ"},"source":["target_col = 'author'\n","n_fold = 3\n","n_class = 5\n","seed = 42"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aVXSuFF08N-O"},"source":["cv = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=seed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PgpDjd6Y8OGc"},"source":["def get_model():\n","    model = Sequential([\n","        Embedding(vocab_size, embedding_dim, input_length=max_length),\n","        Bidirectional(LSTM(64, return_sequences=True)),\n","        Bidirectional(LSTM(64)),\n","        Dense(n_class, activation='softmax')\n","    ])\n","    \n","    model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=.01))\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j2v7l3AS8OMm"},"source":["p_val = np.zeros((trn.shape[0], n_class))\n","p_tst = np.zeros((tst.shape[0], n_class))\n","for i, (i_trn, i_val) in enumerate(cv.split(trn, y), 1):\n","    print(f'training model for CV #{i}')\n","    clf = get_model()\n","    \n","    es = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=3,\n","                       verbose=1, mode='min', baseline=None, restore_best_weights=True)\n","\n","    clf.fit(trn[i_trn], \n","            to_categorical(y[i_trn]),\n","            validation_data=(trn[i_val], to_categorical(y[i_val])),\n","            epochs=10,\n","            batch_size=512,\n","            callbacks=[es])\n","    p_val[i_val, :] = clf.predict(trn[i_val])\n","    p_tst += clf.predict(tst) / n_fold"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5H6Ov2d18OKi"},"source":["print(f'Accuracy (CV): {accuracy_score(y, np.argmax(p_val, axis=1)) * 100:8.4f}%')\n","print(f'Log Loss (CV): {log_loss(pd.get_dummies(y), p_val):8.4f}')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QwloXh3a8OIk"},"source":["np.savetxt(p_val_file, p_val, fmt='%.6f', delimiter=',')\n","np.savetxt(p_tst_file, p_tst, fmt='%.6f', delimiter=',')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P3V50HaG8OEG"},"source":["print(clf.summary())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v2WB9iCq8N8M"},"source":["plot_model(clf)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p-RUDjdh8Nty"},"source":["sub = pd.read_csv(sample_file, index_col=0)\n","print(sub.shape)\n","sub.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rGzykzeu6Y_K"},"source":["sub[sub.columns] = p_tst\n","sub.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CJv9rg7j8rXd"},"source":["sub.to_csv(sub_file)"],"execution_count":null,"outputs":[]}]}