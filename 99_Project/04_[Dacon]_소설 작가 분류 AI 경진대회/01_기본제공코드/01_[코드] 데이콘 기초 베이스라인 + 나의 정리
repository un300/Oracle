{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"01_[코드] 데이콘 기초 베이스라인 + 나의 정리","provenance":[],"private_outputs":true,"collapsed_sections":[],"authorship_tag":"ABX9TyNbDdigbA22Vtd5mdXHJOuU"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"MxZ63A4U2Fz7"},"source":["###### 2020-11-18 수요일"]},{"cell_type":"markdown","metadata":{"id":"37LxQ5ID1h2s"},"source":["# 01_[코드] 데이콘 기초 베이스라인 + 나의정리"]},{"cell_type":"markdown","metadata":{"id":"nxtec3Tl1rSD"},"source":[" - `Dacon 소설 작가 분류 AI 경진대회`에서 제공해주는 코드의 기초 가이드라인입니다\n"," - 딥러닝 부분은 공부해 본적이 없기 때문에, 개인적으로 공부할겸 기록해 두었습니다"]},{"cell_type":"code","metadata":{"id":"htux6YA9ntrg"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hpyysO9GnbVf"},"source":["import warnings\n","warnings.filterwarnings('ignore')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z8dCKPQvneWI"},"source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import re\n","\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.preprocessing.text import Tokenizer\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DDeErf8Qz68G"},"source":["## 1. 데이터 불러오기"]},{"cell_type":"code","metadata":{"id":"mV9gUPDJneeC"},"source":["# 데이터 불러오기\n","\n","raw_train = pd.read_csv('/content/drive/MyDrive/[데이콘] 소설 작가 분류 AI 경진대회/data/train.csv')\n","raw_test = pd.read_csv('/content/drive/MyDrive/[데이콘] 소설 작가 분류 AI 경진대회/data/test_x.csv')\n","sample_submission = pd.read_csv('/content/drive/MyDrive/[데이콘] 소설 작가 분류 AI 경진대회/open/sample_submission.csv')\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WgcZvn5epDHX"},"source":["train = raw_train.copy()\n","test = raw_test.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FqqHHlITz_cy"},"source":["## 2. 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"qkC1gr72o65v"},"source":["# 부호(. , ! 등..)를 제거해 주는 함수\n","\n","def alpha_num(text):\n","    return re.sub(r'[^A-Za-z0-9 ]', '', text)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wIjqAml8nem4"},"source":["# 불용어 제거해주는 함수\n","def remove_stopwords(text):\n","    final_text = []\n","    for i in text.split():\n","        if i.strip().lower() not in stopwords:\n","            final_text.append(i.strip())\n","    return \" \".join(final_text)\n","\n","# 불용어\n","stopwords = [ \"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"as\", \n","             \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\", \"could\", \n","             \"did\", \"do\", \"does\", \"doing\", \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"has\", \n","             \"have\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hers\", \"herself\", \"him\", \"himself\", \n","             \"his\", \"how\", \"how's\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"it\", \"it's\", \"its\", \"itself\", \n","             \"let's\", \"me\", \"more\", \"most\", \"my\", \"myself\", \"nor\", \"of\", \"on\", \"once\", \"only\", \"or\", \"other\", \"ought\", \"our\", \"ours\", \n","             \"ourselves\", \"out\", \"over\", \"own\", \"same\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"so\", \"some\", \"such\", \"than\", \"that\", \n","             \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"these\", \"they\", \"they'd\", \"they'll\", \n","             \"they're\", \"they've\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"very\", \"was\", \"we\", \"we'd\", \"we'll\", \n","             \"we're\", \"we've\", \"were\", \"what\", \"what's\", \"when\", \"when's\", \"where\", \"where's\", \"which\", \"while\", \"who\", \"who's\", \"whom\", \n","             \"why\", \"why's\", \"with\", \"would\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\" ]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QbZJcyrMnepD"},"source":["#전처리 적용\n","train['text'] = train['text'].str.lower()\n","test['text'] = test['text'].str.lower()\n","train['text'] = train['text'].apply(alpha_num).apply(remove_stopwords)\n","test['text'] = test['text'].apply(alpha_num).apply(remove_stopwords)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ip2JvvuQnesl"},"source":["# train test 분리\n","X_train = np.array([x for x in train['text']])\n","X_test = np.array([x for x in test['text']])\n","y_train = np.array([x for x in train['author']])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YUTFazqGneuk"},"source":["#파라미터 설정\n","vocab_size = 20000\n","embedding_dim = 16\n","max_length = 500\n","padding_type='post'\n","#oov_tok = \"<OOV>\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WfbUrF_snerL"},"source":["#tokenizer에 fit\n","tokenizer = Tokenizer(num_words = vocab_size)#, oov_token=oov_tok)\n","tokenizer.fit_on_texts(X_train)\n","word_index = tokenizer.word_index"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dhnyo0z2qCZ4"},"source":["#데이터를 sequence로 변환해주고 padding 해줍니다.\n","train_sequences = tokenizer.texts_to_sequences(X_train)\n","train_padded = pad_sequences(train_sequences, padding=padding_type, maxlen=max_length)\n","\n","test_sequences = tokenizer.texts_to_sequences(X_test)\n","test_padded = pad_sequences(test_sequences, padding=padding_type, maxlen=max_length)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qf74RiL70C1d"},"source":["## 3. NLP 딥러닝"]},{"cell_type":"markdown","metadata":{"id":"d7KoTq1k0QCI"},"source":["### 가벼운 NLP모델 생성"]},{"cell_type":"markdown","metadata":{"id":"OpbzC4oizJss"},"source":["### activation\n"," - linear : 디폴트 값. 별도의 활성화 함수 없이 입력 뉴런과 가중치의 계산결과를 그대로 출력한다.\n"," - sigmoid : 시그모이드 함수. 이진 분류 문제에서 출력층에 주로 사용되는 활성화 함수\n"," - softmax : 소프트맥스 함수. 셋 이상을 분류하는 다중 클래스 분류 문제에서 출력층에 주로 사용되는 활성화 함수\n"," - relu : 렐루 함수. 은닉층에 주로 사용되는 활성화 함수\n"," "]},{"cell_type":"code","metadata":{"id":"5wdE_QJyqCck"},"source":["#가벼운 NLP모델 생성\n","model = tf.keras.Sequential([\n","    ## 워드 임베딩 작업 : 단어를 밀집벡터로 만드는 작업을 말함\n","    # Embedding(단어사전내의단어수, 임베딩후벡터크기, 입력시퀀스의길이)\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),  \n","    tf.keras.layers.GlobalAveragePooling1D(),\n","    tf.keras.layers.Dense(36, activation='relu'),\n","    tf.keras.layers.Dense(5, activation='softmax')\n","])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0xw2swIb0Wek"},"source":["### 컴파일과 훈련\n"," - 컴파일 : 모델을 기계가 이해할 수 있도록 컴파일한다.\n","    - 오차함수와 최적화 방법, 메트릭 함수를 지정할 수 있다.\n","    - `opimizer` : 훈련 과정을 설정하는 옵티마이저를 설정한다. 'adam'이나 'sgd'와 같이 문자열로 지정할 수도 있다.\n","    - `loss` : 훈련 과정에서 사용될 손실함수(loss function)을 설정한다.\n","    - `metrics` : 훈련을 모니터링하기 위한 지표를 선택한다."]},{"cell_type":"code","metadata":{"id":"Jdip_f4gqCeW"},"source":["# compile model\n","model.compile(loss='sparse_categorical_crossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])\n","\n","# model summary\n","print(model.summary())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LB_TRexU2onG"},"source":["##### 검증데이터(Validation)를 사용하여 딥러닝 예측\n"," - 검증데이터를 사용하면 각 epoch마다 검증데이터의 정확도도 함께 출력된다\n"," - 검증데이터의 loss가 낮아지다가 높아지기 시작하면 이것은 과적합(Overfitting)의 신호이다"]},{"cell_type":"code","metadata":{"id":"lw7v6ppCqCgi"},"source":["# fit model\n","num_epochs = 100\n","history = model.fit(train_padded, y_train, \n","                    epochs=num_epochs, verbose=2, \n","                    validation_split=0.2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mNG8srmfqCkZ"},"source":["pred = model.predict_proba(test_padded)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rX9K9eTXqCms"},"source":["pred"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uhrTgDPAqCo2"},"source":["# submission\n","sample_submission[['0','1','2','3','4']] = pred\n","sample_submission"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Y1pIp-LqCi1"},"source":["sample_submission.to_csv('submission.csv', index = False, encoding = 'utf-8')"],"execution_count":null,"outputs":[]}]}